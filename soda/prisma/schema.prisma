generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["linux-musl", "native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OAuthProvider {
  GOOGLE
  FACEBOOK
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAYMENT_FAILED
  UNSHIPPED
  CONFIRMED
  SHIPPED
  CANCELLED
}

enum TransactionStatus {
  NEW
  CANCELLED
  FAILED
  PENDING
  DECLINED
  REJECTED
  SUCCESS
}

enum TransactionType {
  RAZORPAY
}

model Secrets {
  id       String @id @default(cuid())
  user     User   @relation(fields: [id], references: [id])
  password String
}

model Image {
  id          String   @id @default(cuid())
  product     Product? @relation(fields: [productId], references: [id])
  productId   String?
  url         String?
  key         String?
  contentType String?
}

model Cart {
  id   String @id @default(cuid())
  user User   @relation(fields: [id], references: [id])

  cartItems  CartItem[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  checkedOut Boolean    @default(false)
}

model User {
  id String @id @default(cuid())

  email         String  @unique
  emailVerified Boolean @default(false)
  name          String

  avatar      String?
  dateOfBirth DateTime?
  phone       String?   @unique
  bio         String?

  orders        Order[]
  addresses     Address[]
  oauthId       String?        @unique
  oauthProvider OAuthProvider?
  role          Role           @default(USER)

  cart    Cart?
  secrets Secrets?

  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions Transaction[]
}

model CartItem {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String

  cartId String?
  cart   Cart?   @relation(fields: [cartId], references: [id])

  orderId String?
  order   Order?  @relation(fields: [orderId], references: [id])

  quantity Int

  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, cartId])
  @@unique([productId, orderId])
}

model Address {
  id       String @id @default(cuid())
  fullname String

  address String // full address
  town    String?
  region  String?
  nearby  String?
  zipcode String
  city    String
  country String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  orders Order[]

  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String  @id @default(cuid())
  title       String
  description String
  brand       String
  images      Image[]

  color String[]
  size  String[]
  dimensions Int[]
  details Json

  published Boolean @default(false)


  mrp   Float
  price Float // mrp - discount
  tax   Float // total = price + tax

  // hsn/sac code
  taxCode String?

  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId String

  active    Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cart      CartItem[]
}

model Inventory {
  id      String   @id @default(cuid())
  product Product?

  stockQuantity Int      @default(0)
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  sku           String   @unique
}

model Order {
  id String @id @default(cuid())

  subTotal     Float   @default(0) // The total price of the Order Items.
  itemDiscount Float   @default(0) // The total discount of the Order Items.
  tax          Float   @default(0) // The tax on the Order Items.
  shipping     Float   @default(0) // The shipping charges of the Order Items.
  total        Float   @default(0) // The total price of the Order including tax and shipping. It excludes the items discount.
  promo        String? // The promo code of the Order.
  discount     Float   @default(0) // The total discount of the Order based on the promo code or store discount.
  grandTotal   Float // The grand total of the order to be paid by the buyer.

  // relations
  user   User   @relation(fields: [userId], references: [id])
  userId String

  address   Address @relation(fields: [addressId], references: [id])
  addressId String

  orderItems CartItem[]

  status      OrderStatus  @default(PENDING)
  active      Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  transaction Transaction?
}

model Transaction {
  id    String @id @default(cuid())
  order Order  @relation(fields: [id], references: [id])

  user   User   @relation(fields: [userId], references: [id])
  userId String

  notes Json?

  amount   Float // transaction amount passed to the gateway
  currency String  @default("INR")
  receipt  String? // reciept Id passsed to the payment gateway

  paymentId        String? // paymentId given by payment gateway
  paymentOrderId   String? // orderId given by payment gateway
  paymentSignature String?
  reference        String?

  verified  Boolean           @default(false)
  type      TransactionType
  status    TransactionStatus
  active    Boolean           @default(true)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}
